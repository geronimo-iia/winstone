
Using Authentication Realms

The process here is almost identical to that of Tomcat (I know this because I used the Tomcat examples webapp to develop against). There are two components - the web.xml component and selecting/configuring an AuthenticationRealm class.

    * The web.xml part is the same for all webapps - you include the <security-constraint> and <login-config> elements as required, eg (from the Tomcat examples web.xml):

      <security-constraint>
        <display-name>Example Security Constraint</display-name>
        <web-resource-collection>
          <web-resource-name>Protected Area</web-resource-name>
          <url-pattern>/jsp/security/protected/*</url-pattern>
          <http-method>DELETE</http-method>
          <http-method>GET</http-method>
          <http-method>POST</http-method>
          <http-method>PUT</http-method>
        </web-resource-collection>
        <auth-constraint>
          <role-name>tomcat</role-name>
          <role-name>role1</role-name>
        </auth-constraint>
      </security-constraint>

      <login-config>
        <auth-method>FORM</auth-method>
        <realm-name>Example Form-Based Authentication Area</realm-name>
        <form-login-config>
          <form-login-page>/jsp/security/protected/login.jsp</form-login-page>
          <form-error-page>/jsp/security/protected/error.jsp</form-error-page>
        </form-login-config>
      </login-config>

    * The AuthenticationRealm part is Winstone specific. Here you currently have three options:
         1. ArgumentsRealm: Here you simply add additional command line args for each user's password and role list. Passwords are added with --argumentsRealm.passwd.<username>=<password>, and roles are added with --argumentsRealm.roles.<username>=<role1>,<role2>
         2. FileRealm: This is the same as the Tomcat tomcat-users.xml file. Pass in the command line arguments --realmClassName=winstone.realm.FileRealm --fileRealm.configFile=<filename>, and it should work exactly the way Tomcat does by default.
         3. Write your own: You just have to extend the winstone.AuthenticationRealm class, and override the appropriate methods (as the File and Arguments Realms do), and specify the class name in --realmClassName.

This component is left intentionally fairly simple, and relatively extracted. I'm planning to break the realm and authentication stuff into an optional jar later, since not many webapps I've seen use it.
